/* automatically generated by rust-bindgen 0.71.1 */

use crate::ffi;

unsafe extern "C" {
    pub fn cuda_convert_lwe_ciphertext_vector_to_gpu_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        number_of_cts: u32,
        lwe_dimension: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_ciphertext_vector_to_cpu_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        number_of_cts: u32,
        lwe_dimension: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_glwe_sample_extract_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        glwe_array_in: *const ffi::c_void,
        nth_array: *const u32,
        num_nths: u32,
        lwe_per_glwe: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_modulus_switch_inplace_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        size: u32,
        log_modulus: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_modulus_switch_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_out: *mut ffi::c_void,
        lwe_in: *const ffi::c_void,
        size: u32,
        log_modulus: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_centered_modulus_switch_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_out: *mut ffi::c_void,
        lwe_in: *const ffi::c_void,
        lwe_dimension: u32,
        log_modulus: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_improve_noise_modulus_switch_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_array_indexes: *const ffi::c_void,
        encrypted_zeros: *const ffi::c_void,
        lwe_size: u32,
        num_lwes: u32,
        num_zeros: u32,
        input_variance: f64,
        r_sigma: f64,
        bound: f64,
        log_modulus: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_glwe_sample_extract_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        glwe_array_in: *const ffi::c_void,
        nth_array: *const u32,
        num_nths: u32,
        lwe_per_glwe: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
    );
}
pub const PBS_TYPE_MULTI_BIT: PBS_TYPE = 0;
pub const PBS_TYPE_CLASSICAL: PBS_TYPE = 1;
pub type PBS_TYPE = ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CudaModulusSwitchNoiseReductionKeyFFI {
    pub ptr: *const *mut ffi::c_void,
    pub num_zeros: u32,
    pub ms_bound: f64,
    pub ms_r_sigma: f64,
    pub ms_input_variance: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CudaModulusSwitchNoiseReductionKeyFFI"]
        [::std::mem::size_of::<CudaModulusSwitchNoiseReductionKeyFFI>() - 40usize];
    ["Alignment of CudaModulusSwitchNoiseReductionKeyFFI"]
        [::std::mem::align_of::<CudaModulusSwitchNoiseReductionKeyFFI>() - 8usize];
    ["Offset of field: CudaModulusSwitchNoiseReductionKeyFFI::ptr"]
        [::std::mem::offset_of!(CudaModulusSwitchNoiseReductionKeyFFI, ptr) - 0usize];
    ["Offset of field: CudaModulusSwitchNoiseReductionKeyFFI::num_zeros"]
        [::std::mem::offset_of!(CudaModulusSwitchNoiseReductionKeyFFI, num_zeros) - 8usize];
    ["Offset of field: CudaModulusSwitchNoiseReductionKeyFFI::ms_bound"]
        [::std::mem::offset_of!(CudaModulusSwitchNoiseReductionKeyFFI, ms_bound) - 16usize];
    ["Offset of field: CudaModulusSwitchNoiseReductionKeyFFI::ms_r_sigma"]
        [::std::mem::offset_of!(CudaModulusSwitchNoiseReductionKeyFFI, ms_r_sigma) - 24usize];
    ["Offset of field: CudaModulusSwitchNoiseReductionKeyFFI::ms_input_variance"][::std::mem::offset_of!(
        CudaModulusSwitchNoiseReductionKeyFFI,
        ms_input_variance
    ) - 32usize];
};
unsafe extern "C" {
    pub fn scratch_cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        compression_glwe_dimension: u32,
        compression_polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        lwe_per_glwe: u32,
        storage_log_modulus: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        encryption_glwe_dimension: u32,
        encryption_polynomial_size: u32,
        compression_glwe_dimension: u32,
        compression_polynomial_size: u32,
        lwe_dimension: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        storage_log_modulus: u32,
        body_count: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        glwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        fp_ksk: *const *mut ffi::c_void,
        num_nths: u32,
        mem_ptr: *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        glwe_in: *const ffi::c_void,
        indexes_array: *const u32,
        indexes_array_size: u32,
        bsks: *const *mut ffi::c_void,
        mem_ptr: *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
pub const SHIFT_OR_ROTATE_TYPE_LEFT_SHIFT: SHIFT_OR_ROTATE_TYPE = 0;
pub const SHIFT_OR_ROTATE_TYPE_RIGHT_SHIFT: SHIFT_OR_ROTATE_TYPE = 1;
pub const SHIFT_OR_ROTATE_TYPE_LEFT_ROTATE: SHIFT_OR_ROTATE_TYPE = 2;
pub const SHIFT_OR_ROTATE_TYPE_RIGHT_ROTATE: SHIFT_OR_ROTATE_TYPE = 3;
pub type SHIFT_OR_ROTATE_TYPE = ffi::c_uint;
pub const BITOP_TYPE_BITAND: BITOP_TYPE = 0;
pub const BITOP_TYPE_BITOR: BITOP_TYPE = 1;
pub const BITOP_TYPE_BITXOR: BITOP_TYPE = 2;
pub const BITOP_TYPE_SCALAR_BITAND: BITOP_TYPE = 3;
pub const BITOP_TYPE_SCALAR_BITOR: BITOP_TYPE = 4;
pub const BITOP_TYPE_SCALAR_BITXOR: BITOP_TYPE = 5;
pub type BITOP_TYPE = ffi::c_uint;
pub const COMPARISON_TYPE_EQ: COMPARISON_TYPE = 0;
pub const COMPARISON_TYPE_NE: COMPARISON_TYPE = 1;
pub const COMPARISON_TYPE_GT: COMPARISON_TYPE = 2;
pub const COMPARISON_TYPE_GE: COMPARISON_TYPE = 3;
pub const COMPARISON_TYPE_LT: COMPARISON_TYPE = 4;
pub const COMPARISON_TYPE_LE: COMPARISON_TYPE = 5;
pub const COMPARISON_TYPE_MAX: COMPARISON_TYPE = 6;
pub const COMPARISON_TYPE_MIN: COMPARISON_TYPE = 7;
pub type COMPARISON_TYPE = ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CudaRadixCiphertextFFI {
    pub ptr: *mut ffi::c_void,
    pub degrees: *mut u64,
    pub noise_levels: *mut u64,
    pub num_radix_blocks: u32,
    pub max_num_radix_blocks: u32,
    pub lwe_dimension: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CudaRadixCiphertextFFI"][::std::mem::size_of::<CudaRadixCiphertextFFI>() - 40usize];
    ["Alignment of CudaRadixCiphertextFFI"]
        [::std::mem::align_of::<CudaRadixCiphertextFFI>() - 8usize];
    ["Offset of field: CudaRadixCiphertextFFI::ptr"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, ptr) - 0usize];
    ["Offset of field: CudaRadixCiphertextFFI::degrees"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, degrees) - 8usize];
    ["Offset of field: CudaRadixCiphertextFFI::noise_levels"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, noise_levels) - 16usize];
    ["Offset of field: CudaRadixCiphertextFFI::num_radix_blocks"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, num_radix_blocks) - 24usize];
    ["Offset of field: CudaRadixCiphertextFFI::max_num_radix_blocks"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, max_num_radix_blocks) - 28usize];
    ["Offset of field: CudaRadixCiphertextFFI::lwe_dimension"]
        [::std::mem::offset_of!(CudaRadixCiphertextFFI, lwe_dimension) - 32usize];
};
unsafe extern "C" {
    pub fn scratch_cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        input_lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        lut_degree: u64,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_apply_many_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        num_many_lut: u32,
        lut_degree: u64,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut CudaRadixCiphertextFFI,
        input_radix_lwe: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        input_lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        lut_degree: u64,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut CudaRadixCiphertextFFI,
        input_radix_lwe_1: *const CudaRadixCiphertextFFI,
        input_radix_lwe_2: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
        num_radix_blocks: u32,
        shift: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_apply_many_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut CudaRadixCiphertextFFI,
        input_radix_lwe: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
        num_luts: u32,
        lut_stride: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_full_propagation_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_full_propagation_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        input_blocks: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_full_propagation(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_mult_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        is_boolean_left: bool,
        is_boolean_right: bool,
        message_modulus: u32,
        carry_modulus: u32,
        glwe_dimension: u32,
        lwe_dimension: u32,
        polynomial_size: u32,
        pbs_base_log: u32,
        pbs_level: u32,
        ks_base_log: u32,
        ks_level: u32,
        grouping_factor: u32,
        num_blocks: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_mult_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        radix_lwe_out: *mut CudaRadixCiphertextFFI,
        radix_lwe_left: *const CudaRadixCiphertextFFI,
        is_bool_left: bool,
        radix_lwe_right: *const CudaRadixCiphertextFFI,
        is_bool_right: bool,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        mem_ptr: *mut i8,
        polynomial_size: u32,
        num_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_mult(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_negate_integer_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_in: *const CudaRadixCiphertextFFI,
        message_modulus: u32,
        carry_modulus: u32,
        num_radix_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_scalar_addition_integer_radix_ciphertext_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        scalar_input: *const ffi::c_void,
        h_scalar_input: *const ffi::c_void,
        num_scalars: u32,
        message_modulus: u32,
        carry_modulus: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_logical_scalar_shift_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_radix_logical_scalar_shift_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        shift: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_arithmetic_scalar_shift_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_radix_arithmetic_scalar_shift_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        shift: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_logical_scalar_shift(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_arithmetic_scalar_shift(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_shift_and_rotate_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        is_signed: bool,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_radix_shift_and_rotate_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        lwe_shift: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_shift_and_rotate(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_comparison_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        op_type: COMPARISON_TYPE,
        is_signed: bool,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_comparison_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_1: *const CudaRadixCiphertextFFI,
        lwe_array_2: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cuda_scalar_comparison_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_in: *const CudaRadixCiphertextFFI,
        scalar_blocks: *const ffi::c_void,
        h_scalar_blocks: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        num_scalar_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_comparison(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_bitop_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        op_type: BITOP_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_bitop_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_1: *const CudaRadixCiphertextFFI,
        lwe_array_2: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cuda_scalar_bitop_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_input: *const CudaRadixCiphertextFFI,
        clear_blocks: *const ffi::c_void,
        h_clear_blocks: *const ffi::c_void,
        num_clear_blocks: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_bitop(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_cmux_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_cmux_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_condition: *const CudaRadixCiphertextFFI,
        lwe_array_true: *const CudaRadixCiphertextFFI,
        lwe_array_false: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_cmux(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_scalar_rotate_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_radix_scalar_rotate_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        n: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_scalar_rotate(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        requested_flag: u32,
        uses_carry: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_add_and_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        requested_flag: u32,
        uses_carry: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        carry_out: *mut CudaRadixCiphertextFFI,
        carry_in: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        requested_flag: u32,
        uses_carry: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_add_and_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lhs_array: *mut CudaRadixCiphertextFFI,
        rhs_array: *const CudaRadixCiphertextFFI,
        carry_out: *mut CudaRadixCiphertextFFI,
        carry_in: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        requested_flag: u32,
        uses_carry: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_propagate_single_carry(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_add_and_propagate_single_carry(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_overflowing_sub_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        compute_overflow: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_overflowing_sub_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lhs_array: *mut CudaRadixCiphertextFFI,
        rhs_array: *const CudaRadixCiphertextFFI,
        overflow_block: *mut CudaRadixCiphertextFFI,
        input_borrow: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        compute_overflow: u32,
        uses_input_borrow: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_overflowing_sub(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_radix_partial_sum_ciphertexts_vec_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks_in_radix: u32,
        max_num_radix_in_vec: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        reduce_degrees_for_single_carry_propagation: bool,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_radix_partial_sum_ciphertexts_vec_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        radix_lwe_out: *mut CudaRadixCiphertextFFI,
        radix_lwe_vec: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_partial_sum_ciphertexts_vec(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_scalar_mul_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        num_scalar_bits: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_scalar_multiplication_integer_radix_ciphertext_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
        decomposed_scalar: *const u64,
        has_at_least_one_set: *const u64,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        polynomial_size: u32,
        message_modulus: u32,
        num_scalars: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_radix_scalar_mul(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_div_rem_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        is_signed: bool,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_div_rem_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        quotient: *mut CudaRadixCiphertextFFI,
        remainder: *mut CudaRadixCiphertextFFI,
        numerator: *const CudaRadixCiphertextFFI,
        divisor: *const CudaRadixCiphertextFFI,
        is_signed: bool,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_div_rem(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        lut_degree: u64,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut CudaRadixCiphertextFFI,
        generates_or_propagates: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_integer_reverse_blocks_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut CudaRadixCiphertextFFI,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_abs_inplace_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        is_signed: bool,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_abs_inplace_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        ct: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        is_signed: bool,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_abs_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_are_all_comparisons_block_true_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_are_all_comparisons_block_true_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_in: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        num_radix_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_are_all_comparisons_block_true(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_is_at_least_one_comparisons_block_true_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_is_at_least_one_comparisons_block_true_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut CudaRadixCiphertextFFI,
        lwe_array_in: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        num_radix_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_is_at_least_one_comparisons_block_true(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn extend_radix_with_trivial_zero_blocks_msb_64(
        output: *mut CudaRadixCiphertextFFI,
        input: *const CudaRadixCiphertextFFI,
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
    );
}
unsafe extern "C" {
    pub fn trim_radix_blocks_lsb_64(
        output: *mut CudaRadixCiphertextFFI,
        input: *const CudaRadixCiphertextFFI,
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_apply_noise_squashing_kb(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        input_glwe_dimension: u32,
        input_polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        num_original_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_apply_noise_squashing_kb(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut CudaRadixCiphertextFFI,
        input_radix_lwe: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_apply_noise_squashing_kb(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_sub_and_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        requested_flag: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_sub_and_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lhs_array: *mut CudaRadixCiphertextFFI,
        rhs_array: *const CudaRadixCiphertextFFI,
        carry_out: *mut CudaRadixCiphertextFFI,
        carry_in: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        requested_flag: u32,
        uses_carry: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_sub_and_propagate_single_carry(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_unsigned_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        is_divisor_power_of_two: bool,
        log2_divisor_exceeds_threshold: bool,
        multiplier_exceeds_threshold: bool,
        num_scalar_bits: u32,
        ilog2_divisor: u32,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_unsigned_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        numerator_ct: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        decomposed_scalar: *const u64,
        has_at_least_one_set: *const u64,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        bsks: *const *mut ffi::c_void,
        num_scalars: u32,
        multiplier_exceeds_threshold: bool,
        is_divisor_power_of_two: bool,
        log2_divisor_exceeds_threshold: bool,
        ilog2_divisor: u32,
        shift_pre: u64,
        shift_post: u32,
        rhs: u64,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_unsigned_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_extend_radix_with_sign_msb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        num_additional_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_extend_radix_with_sign_msb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output: *mut CudaRadixCiphertextFFI,
        input: *const CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        num_additional_blocks: u32,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_extend_radix_with_sign_msb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_integer_signed_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        num_scalar_bits: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        is_absolute_divisor_one: bool,
        is_divisor_negative: bool,
        l_exceed_threshold: bool,
        is_power_of_two: bool,
        multiplier_is_small: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_signed_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        numerator_ct: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        is_absolute_divisor_one: bool,
        is_divisor_negative: bool,
        l_exceed_threshold: bool,
        is_power_of_two: bool,
        multiplier_is_small: bool,
        l: u32,
        shift_post: u32,
        is_rhs_power_of_two: bool,
        is_rhs_zero: bool,
        is_rhs_one: bool,
        rhs_shift: u32,
        numerator_bits: u32,
        num_scalars: u32,
        decomposed_scalar: *const u64,
        has_at_least_one_set: *const u64,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_signed_scalar_div_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_integer_unsigned_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        is_divisor_power_of_two: bool,
        log2_divisor_exceeds_threshold: bool,
        multiplier_exceeds_threshold: bool,
        num_scalar_bits_for_div: u32,
        num_scalar_bits_for_mul: u32,
        ilog2_divisor: u32,
        divisor: u64,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_unsigned_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        quotient_ct: *mut CudaRadixCiphertextFFI,
        remainder_ct: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        decomposed_scalar_for_div: *const u64,
        decomposed_scalar_for_mul: *const u64,
        has_at_least_one_set_for_div: *const u64,
        has_at_least_one_set_for_mul: *const u64,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        num_scalars_for_div: u32,
        num_scalars_for_mul: u32,
        multiplier_exceeds_threshold: bool,
        is_divisor_power_of_two: bool,
        log2_divisor_exceeds_threshold: bool,
        ilog2_divisor: u32,
        divisor: u64,
        shift_pre: u64,
        shift_post: u32,
        rhs: u64,
        clear_blocks: *const ffi::c_void,
        h_clear_blocks: *const ffi::c_void,
        num_clear_blocks: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_unsigned_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_integer_signed_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
        num_scalar_bits_for_div: u32,
        num_scalar_bits_for_mul: u32,
        is_absolute_divisor_one: bool,
        is_divisor_negative: bool,
        l_exceed_threshold: bool,
        is_absolute_divisor_power_of_two: bool,
        is_divisor_zero: bool,
        multiplier_is_small: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_integer_signed_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        quotient_ct: *mut CudaRadixCiphertextFFI,
        remainder_ct: *mut CudaRadixCiphertextFFI,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        is_absolute_divisor_one: bool,
        is_divisor_negative: bool,
        is_divisor_zero: bool,
        l_exceed_threshold: bool,
        is_absolute_divisor_power_of_two: bool,
        multiplier_is_small: bool,
        l: u32,
        shift_post: u32,
        is_rhs_power_of_two: bool,
        is_rhs_zero: bool,
        is_rhs_one: bool,
        rhs_shift: u32,
        divisor_shift: u32,
        numerator_bits: u32,
        num_scalars_for_div: u32,
        num_scalars_for_mul: u32,
        decomposed_scalar_for_div: *const u64,
        decomposed_scalar_for_mul: *const u64,
        has_at_least_one_set_for_div: *const u64,
        has_at_least_one_set_for_mul: *const u64,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_integer_signed_scalar_div_rem_radix_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
pub const KS_TYPE_BIG_TO_SMALL: KS_TYPE = 0;
pub const KS_TYPE_SMALL_TO_BIG: KS_TYPE = 1;
pub type KS_TYPE = ffi::c_uint;
unsafe extern "C" {
    pub fn cuda_lwe_expand_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_compact_array_in: *const ffi::c_void,
        lwe_dimension: u32,
        num_lwe: u32,
        lwe_compact_input_indexes: *const u32,
        output_body_id_per_compact_list: *const u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_expand_without_verification_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        computing_ks_level: u32,
        computing_ks_base_log: u32,
        casting_input_dimension: u32,
        casting_output_dimension: u32,
        casting_ks_level: u32,
        casting_ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_lwes_per_compact_list: *const u32,
        is_boolean_array: *const bool,
        num_compact_lists: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        casting_key_type: KS_TYPE,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_expand_without_verification_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_flattened_compact_array_in: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        computing_ksks: *const *mut ffi::c_void,
        casting_keys: *const *mut ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
    );
}
unsafe extern "C" {
    pub fn cleanup_expand_without_verification_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_keyswitch_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        ksk: *const ffi::c_void,
        lwe_dimension_in: u32,
        lwe_dimension_out: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_keyswitch_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        ksk: *const ffi::c_void,
        lwe_dimension_in: u32,
        lwe_dimension_out: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_packing_keyswitch_lwe_list_to_glwe_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        fp_ks_buffer: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        num_lwes: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_packing_keyswitch_lwe_list_to_glwe_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        glwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        fp_ksk_array: *const ffi::c_void,
        fp_ks_buffer: *mut i8,
        input_lwe_dimension: u32,
        output_glwe_dimension: u32,
        output_polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_lwes: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_packing_keyswitch_lwe_list_to_glwe_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        fp_ks_buffer: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        num_lwes: u32,
        allocate_gpu_memory: bool,
    );
}
unsafe extern "C" {
    pub fn cuda_packing_keyswitch_lwe_list_to_glwe_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        glwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        fp_ksk_array: *const ffi::c_void,
        fp_ks_buffer: *mut i8,
        input_lwe_dimension: u32,
        output_glwe_dimension: u32,
        output_polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_lwes: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_packing_keyswitch_lwe_list_to_glwe(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        fp_ks_buffer: *mut *mut i8,
        gpu_memory_allocated: bool,
    );
}
unsafe extern "C" {
    pub fn cuda_negate_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_negate_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        output: *mut CudaRadixCiphertextFFI,
        input_1: *const CudaRadixCiphertextFFI,
        input_2: *const CudaRadixCiphertextFFI,
    );
}
unsafe extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        output: *mut CudaRadixCiphertextFFI,
        input_1: *const CudaRadixCiphertextFFI,
        input_2: *const CudaRadixCiphertextFFI,
    );
}
unsafe extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_plaintext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        plaintext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_plaintext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        plaintext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_mult_lwe_ciphertext_vector_cleartext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        cleartext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_mult_lwe_ciphertext_vector_cleartext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        cleartext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_wrapping_polynomial_mul_one_to_many_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        polynomial_size: u32,
        circulant_buf: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_wrapping_polynomial_mul_one_to_many_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        circulant_buf: *mut i8,
    );
}
unsafe extern "C" {
    pub fn cuda_wrapping_polynomial_mul_one_to_many_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        result: *mut ffi::c_void,
        poly_lhs: *const ffi::c_void,
        circulant: *mut i8,
        poly_rhs: *const ffi::c_void,
        polynomial_size: u32,
        n_rhs: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_glwe_wrapping_polynomial_mul_one_to_many_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        result: *mut ffi::c_void,
        poly_lhs: *const ffi::c_void,
        circulant: *mut i8,
        poly_rhs: *const ffi::c_void,
        polynomial_size: u32,
        glwe_dimension: u32,
        n_rhs: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_plaintext_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        plaintext_in: u64,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_fourier_transform_forward_as_torus_f128_async(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        re0: *mut ffi::c_void,
        re1: *mut ffi::c_void,
        im0: *mut ffi::c_void,
        im1: *mut ffi::c_void,
        standard: *const ffi::c_void,
        N: u32,
        number_of_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_fourier_transform_forward_as_integer_f128_async(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        re0: *mut ffi::c_void,
        re1: *mut ffi::c_void,
        im0: *mut ffi::c_void,
        im1: *mut ffi::c_void,
        standard: *const ffi::c_void,
        N: u32,
        number_of_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_fourier_transform_backward_as_torus_f128_async(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        standard: *mut ffi::c_void,
        re0: *const ffi::c_void,
        re1: *const ffi::c_void,
        im0: *const ffi::c_void,
        im1: *const ffi::c_void,
        N: u32,
        number_of_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_fourier_polynomial_mul(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        input1: *const ffi::c_void,
        input2: *const ffi::c_void,
        output: *mut ffi::c_void,
        polynomial_size: u32,
        total_polynomials: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_programmable_bootstrap_key_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_programmable_bootstrap_key_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_programmable_bootstrap_key_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_amortized_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_amortized_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_programmable_bootstrap_amortized_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        pbs_buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_programmable_bootstrap_amortized_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        pbs_buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_programmable_bootstrap_amortized(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
        allocate_ms_array: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_programmable_bootstrap_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        num_many_lut: u32,
        lut_stride: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_programmable_bootstrap_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        ms_noise_reduction_ptr: *mut ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        num_many_lut: u32,
        lut_stride: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_programmable_bootstrap_lwe_ciphertext_vector_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lut_vector: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        ms_noise_reduction_key: *const CudaModulusSwitchNoiseReductionKeyFFI,
        ms_noise_reduction_ptr: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_programmable_bootstrap(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_programmable_bootstrap_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn has_support_to_cuda_programmable_bootstrap_cg_multi_bit(
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        num_samples: u32,
        max_shared_memory: u32,
    ) -> bool;
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_multi_bit_programmable_bootstrap_key_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
        grouping_factor: u32,
    );
}
unsafe extern "C" {
    pub fn cuda_convert_lwe_multi_bit_programmable_bootstrap_key_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
        grouping_factor: u32,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_multi_bit_programmable_bootstrap_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_multi_bit_programmable_bootstrap_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        grouping_factor: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        num_many_lut: u32,
        lut_stride: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_multi_bit_programmable_bootstrap(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
unsafe extern "C" {
    pub fn scratch_cuda_multi_bit_programmable_bootstrap_128_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    ) -> u64;
}
unsafe extern "C" {
    pub fn cuda_multi_bit_programmable_bootstrap_lwe_ciphertext_vector_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        mem_ptr: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        grouping_factor: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        num_many_lut: u32,
        lut_stride: u32,
    );
}
unsafe extern "C" {
    pub fn cleanup_cuda_multi_bit_programmable_bootstrap_128(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
    );
}
