/* automatically generated by rust-bindgen 0.70.1 */

use crate::ffi;

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type __u_char = ffi::c_uchar;
pub type __u_short = ffi::c_ushort;
pub type __u_int = ffi::c_uint;
pub type __u_long = ffi::c_ulong;
pub type __int8_t = ffi::c_schar;
pub type __uint8_t = ffi::c_uchar;
pub type __int16_t = ffi::c_short;
pub type __uint16_t = ffi::c_ushort;
pub type __int32_t = ffi::c_int;
pub type __uint32_t = ffi::c_uint;
pub type __int64_t = ffi::c_long;
pub type __uint64_t = ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ffi::c_long;
pub type __u_quad_t = ffi::c_ulong;
pub type __intmax_t = ffi::c_long;
pub type __uintmax_t = ffi::c_ulong;
pub type __dev_t = ffi::c_ulong;
pub type __uid_t = ffi::c_uint;
pub type __gid_t = ffi::c_uint;
pub type __ino_t = ffi::c_ulong;
pub type __ino64_t = ffi::c_ulong;
pub type __mode_t = ffi::c_uint;
pub type __nlink_t = ffi::c_ulong;
pub type __off_t = ffi::c_long;
pub type __off64_t = ffi::c_long;
pub type __pid_t = ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ffi::c_long;
pub type __rlim_t = ffi::c_ulong;
pub type __rlim64_t = ffi::c_ulong;
pub type __id_t = ffi::c_uint;
pub type __time_t = ffi::c_long;
pub type __useconds_t = ffi::c_uint;
pub type __suseconds_t = ffi::c_long;
pub type __suseconds64_t = ffi::c_long;
pub type __daddr_t = ffi::c_int;
pub type __key_t = ffi::c_int;
pub type __clockid_t = ffi::c_int;
pub type __timer_t = *mut ffi::c_void;
pub type __blksize_t = ffi::c_long;
pub type __blkcnt_t = ffi::c_long;
pub type __blkcnt64_t = ffi::c_long;
pub type __fsblkcnt_t = ffi::c_ulong;
pub type __fsblkcnt64_t = ffi::c_ulong;
pub type __fsfilcnt_t = ffi::c_ulong;
pub type __fsfilcnt64_t = ffi::c_ulong;
pub type __fsword_t = ffi::c_long;
pub type __ssize_t = ffi::c_long;
pub type __syscall_slong_t = ffi::c_long;
pub type __syscall_ulong_t = ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ffi::c_char;
pub type __intptr_t = ffi::c_long;
pub type __socklen_t = ffi::c_uint;
pub type __sig_atomic_t = ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ffi::c_schar;
pub type int_fast16_t = ffi::c_long;
pub type int_fast32_t = ffi::c_long;
pub type int_fast64_t = ffi::c_long;
pub type uint_fast8_t = ffi::c_uchar;
pub type uint_fast16_t = ffi::c_ulong;
pub type uint_fast32_t = ffi::c_ulong;
pub type uint_fast64_t = ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn cuda_convert_lwe_ciphertext_vector_to_gpu_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        number_of_cts: u32,
        lwe_dimension: u32,
    );
}
extern "C" {
    pub fn cuda_convert_lwe_ciphertext_vector_to_cpu_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        number_of_cts: u32,
        lwe_dimension: u32,
    );
}
extern "C" {
    pub fn cuda_glwe_sample_extract_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        glwe_array_in: *const ffi::c_void,
        nth_array: *const u32,
        num_nths: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
    );
}
pub const PBS_TYPE_MULTI_BIT: PBS_TYPE = 0;
pub const PBS_TYPE_CLASSICAL: PBS_TYPE = 1;
pub type PBS_TYPE = ffi::c_uint;
pub const PBS_VARIANT_DEFAULT: PBS_VARIANT = 0;
pub const PBS_VARIANT_CG: PBS_VARIANT = 1;
pub const PBS_VARIANT_TBC: PBS_VARIANT = 2;
pub type PBS_VARIANT = ffi::c_uint;
extern "C" {
    pub fn scratch_cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        compression_glwe_dimension: u32,
        compression_polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        lwe_per_glwe: u32,
        storage_log_modulus: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        encryption_glwe_dimension: u32,
        encryption_polynomial_size: u32,
        compression_glwe_dimension: u32,
        compression_polynomial_size: u32,
        lwe_dimension: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        storage_log_modulus: u32,
        body_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        glwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        fp_ksk: *const *mut ffi::c_void,
        num_nths: u32,
        mem_ptr: *mut i8,
    );
}
extern "C" {
    pub fn cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        glwe_in: *const ffi::c_void,
        indexes_array: *const u32,
        indexes_array_size: u32,
        bsks: *const *mut ffi::c_void,
        mem_ptr: *mut i8,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_compress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_decompress_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
pub const OUTPUT_CARRY_NONE: OUTPUT_CARRY = 0;
pub const OUTPUT_CARRY_GENERATED: OUTPUT_CARRY = 1;
pub const OUTPUT_CARRY_PROPAGATED: OUTPUT_CARRY = 2;
pub type OUTPUT_CARRY = ffi::c_uint;
pub const SHIFT_OR_ROTATE_TYPE_LEFT_SHIFT: SHIFT_OR_ROTATE_TYPE = 0;
pub const SHIFT_OR_ROTATE_TYPE_RIGHT_SHIFT: SHIFT_OR_ROTATE_TYPE = 1;
pub const SHIFT_OR_ROTATE_TYPE_LEFT_ROTATE: SHIFT_OR_ROTATE_TYPE = 2;
pub const SHIFT_OR_ROTATE_TYPE_RIGHT_ROTATE: SHIFT_OR_ROTATE_TYPE = 3;
pub type SHIFT_OR_ROTATE_TYPE = ffi::c_uint;
pub const BITOP_TYPE_BITAND: BITOP_TYPE = 0;
pub const BITOP_TYPE_BITOR: BITOP_TYPE = 1;
pub const BITOP_TYPE_BITXOR: BITOP_TYPE = 2;
pub const BITOP_TYPE_SCALAR_BITAND: BITOP_TYPE = 3;
pub const BITOP_TYPE_SCALAR_BITOR: BITOP_TYPE = 4;
pub const BITOP_TYPE_SCALAR_BITXOR: BITOP_TYPE = 5;
pub type BITOP_TYPE = ffi::c_uint;
pub const COMPARISON_TYPE_EQ: COMPARISON_TYPE = 0;
pub const COMPARISON_TYPE_NE: COMPARISON_TYPE = 1;
pub const COMPARISON_TYPE_GT: COMPARISON_TYPE = 2;
pub const COMPARISON_TYPE_GE: COMPARISON_TYPE = 3;
pub const COMPARISON_TYPE_LT: COMPARISON_TYPE = 4;
pub const COMPARISON_TYPE_LE: COMPARISON_TYPE = 5;
pub const COMPARISON_TYPE_MAX: COMPARISON_TYPE = 6;
pub const COMPARISON_TYPE_MIN: COMPARISON_TYPE = 7;
pub type COMPARISON_TYPE = ffi::c_uint;
pub const CMP_ORDERING_IS_INFERIOR: CMP_ORDERING = 0;
pub const CMP_ORDERING_IS_EQUAL: CMP_ORDERING = 1;
pub const CMP_ORDERING_IS_SUPERIOR: CMP_ORDERING = 2;
pub type CMP_ORDERING = ffi::c_uint;
pub const SIGNED_OPERATION_ADDITION: SIGNED_OPERATION = 1;
pub const SIGNED_OPERATION_SUBTRACTION: SIGNED_OPERATION = -1;
pub type SIGNED_OPERATION = ffi::c_int;
extern "C" {
    pub fn scratch_cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        input_lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut ffi::c_void,
        input_radix_lwe: *const ffi::c_void,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_apply_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        input_lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut ffi::c_void,
        input_radix_lwe_1: *const ffi::c_void,
        input_radix_lwe_2: *const ffi::c_void,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
        shift: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_apply_bivariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn cuda_apply_many_univariate_lut_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut ffi::c_void,
        input_radix_lwe: *const ffi::c_void,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
        num_luts: u32,
        lut_stride: u32,
    );
}
extern "C" {
    pub fn scratch_cuda_full_propagation_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_full_propagation_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        input_blocks: *mut ffi::c_void,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_full_propagation(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_mult_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        message_modulus: u32,
        carry_modulus: u32,
        glwe_dimension: u32,
        lwe_dimension: u32,
        polynomial_size: u32,
        pbs_base_log: u32,
        pbs_level: u32,
        ks_base_log: u32,
        ks_level: u32,
        grouping_factor: u32,
        num_blocks: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_mult_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        radix_lwe_out: *mut ffi::c_void,
        radix_lwe_left: *const ffi::c_void,
        radix_lwe_right: *const ffi::c_void,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        mem_ptr: *mut i8,
        polynomial_size: u32,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_mult(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn cuda_negate_integer_radix_ciphertext_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_dimension: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
    );
}
extern "C" {
    pub fn cuda_scalar_addition_integer_radix_ciphertext_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        scalar_input: *const ffi::c_void,
        lwe_dimension: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_logical_scalar_shift_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_logical_scalar_shift_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        shift: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_arithmetic_scalar_shift_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_arithmetic_scalar_shift_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        shift: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_logical_scalar_shift(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_arithmetic_scalar_shift(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_shift_and_rotate_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        is_signed: bool,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_shift_and_rotate_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        lwe_shift: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_shift_and_rotate(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_comparison_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        op_type: COMPARISON_TYPE,
        is_signed: bool,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_comparison_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_1: *const ffi::c_void,
        lwe_array_2: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_scalar_comparison_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        scalar_blocks: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_ciphertext_count: u32,
        num_scalar_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_comparison(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_bitop_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        op_type: BITOP_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_bitop_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_1: *const ffi::c_void,
        lwe_array_2: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_scalar_bitop_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_input: *const ffi::c_void,
        clear_blocks: *const ffi::c_void,
        num_clear_blocks: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_ciphertext_count: u32,
        op: BITOP_TYPE,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_bitop(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_cmux_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        lwe_ciphertext_count: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_cmux_integer_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_condition: *const ffi::c_void,
        lwe_array_true: *const ffi::c_void,
        lwe_array_false: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_cmux(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_scalar_rotate_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        shift_type: SHIFT_OR_ROTATE_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_scalar_rotate_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        n: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_scalar_rotate(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_propagate_single_carry_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        carry_out: *mut ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cuda_propagate_single_carry_get_input_carries_kb_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        carry_out: *mut ffi::c_void,
        input_carries: *mut ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_propagate_single_carry(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_partial_sum_ciphertexts_vec_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks_in_radix: u32,
        max_num_radix_in_vec: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_partial_sum_ciphertexts_vec_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        radix_lwe_out: *mut ffi::c_void,
        radix_lwe_vec: *mut ffi::c_void,
        num_radix_in_vec: u32,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks_in_radix: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_partial_sum_ciphertexts_vec(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_radix_overflowing_sub_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_radix_overflowing_sub_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        radix_lwe_out: *mut ffi::c_void,
        radix_lwe_overflowed: *mut ffi::c_void,
        radix_lwe_left: *const ffi::c_void,
        radix_lwe_right: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks_in_radix: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_overflowing_sub(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_scalar_mul_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_scalar_multiplication_integer_radix_ciphertext_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        decomposed_scalar: *const u64,
        has_at_least_one_set: *const u64,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        lwe_dimension: u32,
        polynomial_size: u32,
        message_modulus: u32,
        num_blocks: u32,
        num_scalars: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_radix_scalar_mul(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_div_rem_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_div_rem_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        quotient: *mut ffi::c_void,
        remainder: *mut ffi::c_void,
        numerator: *const ffi::c_void,
        divisor: *const ffi::c_void,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks_in_radix: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_div_rem(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_signed_overflowing_add_or_sub_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        big_lwe_dimension: u32,
        small_lwe_dimension: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_blocks: u32,
        signed_operation: i8,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_signed_overflowing_add_or_sub_radix_ciphertext_kb_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lhs: *mut ffi::c_void,
        rhs: *const ffi::c_void,
        overflowed: *mut ffi::c_void,
        signed_operation: i8,
        mem_ptr: *mut i8,
        bsks: *const *mut ffi::c_void,
        ksks: *const *mut ffi::c_void,
        num_blocks_in_radix: u32,
    );
}
extern "C" {
    pub fn cleanup_signed_overflowing_add_or_sub(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr: *mut *mut i8,
        input_lut: *const ffi::c_void,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        ks_level: u32,
        ks_base_log: u32,
        pbs_level: u32,
        pbs_base_log: u32,
        grouping_factor: u32,
        num_radix_blocks: u32,
        message_modulus: u32,
        carry_modulus: u32,
        pbs_type: PBS_TYPE,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        output_radix_lwe: *mut ffi::c_void,
        generates_or_propagates: *mut ffi::c_void,
        mem_ptr: *mut i8,
        ksks: *const *mut ffi::c_void,
        bsks: *const *mut ffi::c_void,
        num_blocks: u32,
        shift: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_integer_compute_prefix_sum_hillis_steele_64(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        mem_ptr_void: *mut *mut i8,
    );
}
extern "C" {
    pub fn cuda_integer_reverse_blocks_64_inplace(
        streams: *const *mut ffi::c_void,
        gpu_indexes: *const u32,
        gpu_count: u32,
        lwe_array: *mut ffi::c_void,
        num_blocks: u32,
        lwe_size: u32,
    );
}
extern "C" {
    pub fn cuda_keyswitch_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        ksk: *const ffi::c_void,
        lwe_dimension_in: u32,
        lwe_dimension_out: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
extern "C" {
    pub fn cuda_keyswitch_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        ksk: *const ffi::c_void,
        lwe_dimension_in: u32,
        lwe_dimension_out: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
extern "C" {
    pub fn scratch_packing_keyswitch_lwe_list_to_glwe_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        fp_ks_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        num_lwes: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_packing_keyswitch_lwe_list_to_glwe_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        glwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        fp_ksk_array: *const ffi::c_void,
        fp_ks_buffer: *mut i8,
        input_lwe_dimension: u32,
        output_glwe_dimension: u32,
        output_polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_lwes: u32,
    );
}
extern "C" {
    pub fn cleanup_packing_keyswitch_lwe_list_to_glwe(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        fp_ks_buffer: *mut *mut i8,
    );
}
extern "C" {
    pub fn cuda_negate_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_negate_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in_1: *const ffi::c_void,
        lwe_array_in_2: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in_1: *const ffi::c_void,
        lwe_array_in_2: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_plaintext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        plaintext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_add_lwe_ciphertext_vector_plaintext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        plaintext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_mult_lwe_ciphertext_vector_cleartext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        cleartext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_mult_lwe_ciphertext_vector_cleartext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        cleartext_array_in: *const ffi::c_void,
        input_lwe_dimension: u32,
        input_lwe_ciphertext_count: u32,
    );
}
extern "C" {
    pub fn cuda_fourier_polynomial_mul(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        input1: *const ffi::c_void,
        input2: *const ffi::c_void,
        output: *mut ffi::c_void,
        polynomial_size: u32,
        total_polynomials: u32,
    );
}
extern "C" {
    pub fn cuda_convert_lwe_programmable_bootstrap_key_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
    );
}
extern "C" {
    pub fn cuda_convert_lwe_programmable_bootstrap_key_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
    );
}
extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_amortized_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_amortized_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_programmable_bootstrap_amortized_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        pbs_buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
extern "C" {
    pub fn cuda_programmable_bootstrap_amortized_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        pbs_buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_programmable_bootstrap_amortized(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn scratch_cuda_programmable_bootstrap_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_programmable_bootstrap_lwe_ciphertext_vector_32(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        lut_count: u32,
        lut_stride: u32,
    );
}
extern "C" {
    pub fn cuda_programmable_bootstrap_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        lut_count: u32,
        lut_stride: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_programmable_bootstrap(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
extern "C" {
    pub fn has_support_to_cuda_programmable_bootstrap_cg_multi_bit(
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        num_samples: u32,
    ) -> bool;
}
extern "C" {
    pub fn cuda_convert_lwe_multi_bit_programmable_bootstrap_key_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        dest: *mut ffi::c_void,
        src: *const ffi::c_void,
        input_lwe_dim: u32,
        glwe_dim: u32,
        level_count: u32,
        polynomial_size: u32,
        grouping_factor: u32,
    );
}
extern "C" {
    pub fn scratch_cuda_multi_bit_programmable_bootstrap_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
        glwe_dimension: u32,
        polynomial_size: u32,
        level_count: u32,
        input_lwe_ciphertext_count: u32,
        allocate_gpu_memory: bool,
    );
}
extern "C" {
    pub fn cuda_multi_bit_programmable_bootstrap_lwe_ciphertext_vector_64(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        lwe_array_out: *mut ffi::c_void,
        lwe_output_indexes: *const ffi::c_void,
        lut_vector: *const ffi::c_void,
        lut_vector_indexes: *const ffi::c_void,
        lwe_array_in: *const ffi::c_void,
        lwe_input_indexes: *const ffi::c_void,
        bootstrapping_key: *const ffi::c_void,
        buffer: *mut i8,
        lwe_dimension: u32,
        glwe_dimension: u32,
        polynomial_size: u32,
        grouping_factor: u32,
        base_log: u32,
        level_count: u32,
        num_samples: u32,
        lut_count: u32,
        lut_stride: u32,
    );
}
extern "C" {
    pub fn cleanup_cuda_multi_bit_programmable_bootstrap(
        stream: *mut ffi::c_void,
        gpu_index: u32,
        pbs_buffer: *mut *mut i8,
    );
}
